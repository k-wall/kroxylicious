# docker.yaml - builds and pushes a kroxylicious container image.
#
# Requires repository variables:
# - REGISTRY_SERVER - the server of the container registry service e.g. `quay.io` or `docker.io`
# - REGISTRY_USERNAME - your username on the service (or username of your robot account)
# - REGISTRY_DESTINATION - the push destination (without tag portion) e.g. `quay.io/<my org>/kroxylicious`
# and a repository secret
# - REGISTRY_TOKEN - the access token that corresponds to `REGISTRY_USERNAME`
#
# If the required repository variables aren't set the workflow will be skipped. This means the workflow won't fail
# on the forks of developers who haven't configured the variables/secrets.

name: Docker Build

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*.*'
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Determine Build Configuration
        id: build_configuration
        run: |
          RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "pull_request" || "${{ vars.REGISTRY_SERVER }}" == "" ]]; then
            echo "proxy_tags=kroxylicious-proxy:${RELEASE_VERSION}" >> $GITHUB_OUTPUT
            echo "operator_tags=kroxylicious-operator:${RELEASE_VERSION}" >> $GITHUB_OUTPUT
            echo "push_images=false" >> $GITHUB_OUTPUT
          else
            PROXY_IMAGE="${{ vars.REGISTRY_SERVER }}/${{ vars.REGISTRY_ORGANISATION }}/${{ vars.PROXY_IMAGE_NAME }}"
            OPERATOR_IMAGE="${{ vars.REGISTRY_SERVER }}/${{ vars.REGISTRY_ORGANISATION }}/${{ vars.OPERATOR_IMAGE_NAME }}"
            echo "proxy_tags=${PROXY_IMAGE}:${RELEASE_VERSION}" >> $GITHUB_OUTPUT
            echo "operator_tags=${OPERATOR_IMAGE}:${RELEASE_VERSION},${OPERATOR_IMAGE}:latest" >> $GITHUB_OUTPUT
            echo "push_images=true" >> $GITHUB_OUTPUT
          fi

      - name: Login to container registry
        if: steps.build_configuration.outputs.push_images == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_SERVER }}
          username: ${{ vars.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: 'Cache Maven packages'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Build Kroxylicious Operator/Operand Container Images (amd64)'
        run: |
          mvn --batch-mode --activate-profiles dist --also-make --projects :kroxylicious-app,:kroxylicious-operator,:kroxylicious-operator-dist -DskipTests package  -Ddocker.platform=linux/amd64

          cp kroxylicious-app/target/kroxylicious-proxy.img.tar.gz kroxylicious-app/target/kroxylicious-proxy-amd64.img.tar.gz
          cp kroxylicious-operator/target/kroxylicious-operator.img.tar.gz kroxylicious-operator/target/kroxylicious-operator-amd64.img.tar.gz

      - name: 'Build Kroxylicious Operator/Operand Container Images (arm64)'
        run: |
          mvn --batch-mode --activate-profiles dist --also-make --projects :kroxylicious-app,:kroxylicious-operator,:kroxylicious-operator-dist -DskipTests package  -Ddocker.platform=linux/arm64

          cp kroxylicious-app/target/kroxylicious-proxy.img.tar.gz kroxylicious-app/target/kroxylicious-proxy-arm64.img.tar.gz
          cp kroxylicious-operator/target/kroxylicious-operator.img.tar.gz kroxylicious-operator/target/kroxylicious-operator-arm64.img.tar.gz

      - name: 'Push proxy image'
        if: ${{ steps.build_configuration.outputs.push_images == 'true' }}
        run: |
          KROXYLICIOUS_PROXY_IMAGE="$(mvn --quiet --projects kroxylicious-app --activate-profiles dist org.apache.maven.plugins:maven-help-plugin:3.4.0:evaluate -Dexpression=io.kroxylicious.proxy.image.name -DforceStdout)"
          KWALL_PROXY_IMAGE=$(echo ${KROXYLICIOUS_PROXY_IMAGE} | sed -e 's/kroxylicious/k_wall/')
          KWALL_PROXY_IMAGE_AMD64=${KWALL_PROXY_IMAGE}-amd64
          KWALL_PROXY_IMAGE_ARM64=${KWALL_PROXY_IMAGE}-arm64
          
          docker image load -i kroxylicious-app/target/kroxylicious-proxy-amd64.img.tar.gz          
          docker tag ${KROXYLICIOUS_PROXY_IMAGE} ${KWALL_PROXY_IMAGE_AMD64}
          
          docker inspect  ${KWALL_PROXY_IMAGE_AMD64}

          docker image load -i kroxylicious-app/target/kroxylicious-proxy-arm64.img.tar.gz
          docker tag ${KROXYLICIOUS_PROXY_IMAGE} ${KWALL_PROXY_IMAGE_ARM64}

          docker inspect ${KWALL_PROXY_IMAGE_ARM64}
          
          docker push ${KWALL_PROXY_IMAGE_AMD64}
          docker push ${KWALL_PROXY_IMAGE_ARM64}
          
          docker manifest create ${KWALL_PROXY_IMAGE} |  \
              --amend  ${KWALL_PROXY_IMAGE_AMD64} \
              --amend  ${KWALL_PROXY_IMAGE_ARM64}
          
          docker manifest push ${KWALL_PROXY_IMAGE} 


          docker inspect ${KWALL_PROXY_IMAGE} 
