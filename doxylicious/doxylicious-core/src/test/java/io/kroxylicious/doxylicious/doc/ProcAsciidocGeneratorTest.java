/*
 * Copyright Kroxylicious Authors.
 *
 * Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
 */

package io.kroxylicious.doxylicious.doc;

import java.io.IOException;
import java.io.StringWriter;

import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;

import io.kroxylicious.doxylicious.model.ProcDecl;
import io.kroxylicious.doxylicious.model.Unit;

import freemarker.template.TemplateException;

import static org.assertj.core.api.Assertions.assertThat;

class ProcAsciidocGeneratorTest {
    @Test
    void shouldRender() throws IOException, TemplateException {
        ProcAsciidocGenerator procAsciidocGenerator = new ProcAsciidocGenerator();
        var proc = new YAMLMapper().readValue(getClass().getResource("/example_proc.yaml"), ProcDecl.class);
        StringWriter out = new StringWriter();

        // when
        procAsciidocGenerator.renderProc(new Unit("", null), proc,
                new ErrorReporter() {
                    @Override
                    public void reportError(String message) {
                        throw new IllegalStateException();
                    }

                    @Override
                    public int numErrors() {
                        return 0;
                    }
                },
                out);
        assertThat(out).hasToString(
                """
                        // DO NOT EDIT THIS FILE DIRECTLY
                        // You'll be wasting your time because it is auto-generated from the proc descriptor

                        [id='example_proc-{context}']

                        = Deploying a minimal proxy instance

                        [role="_abstract"]
                        This procedure shows how to deploy a basic Kroxylicious proxy, without any filters, accessible using plain TCP networking to clients in the same Kubernetes cluster.

                        Blah blah

                        .Prerequisites

                        * xref:have_a_kubectl-operator[Access to a Kubernetes cluster using `kubectl`]

                        .Procedure

                        . Install the examples
                        +
                        [source,shell]
                        ----
                        kubectl apply -f examples/simple/
                        ----
                        +
                        That ought to do it

                        . Drink some coffee


                        .Verification

                        . Check it worked
                        +
                        [source,shell]
                        ----
                        true
                        ----


                        [role="_additional-resources"]
                        .Additional resources
                        * additional resource 1
                        * additional resource 2
                        """);
    }
}
